.windows_10: &windows_10
  tags:
    - windows_10
  variables:
    OS: windows_10
    mode: "light"

.window_get_superbuild:
  script: &windows_get_superbuild
    - ABSOLUTE_CI_PROJECT_DIR=$(pwd) # else not absolute on windows + cygwin
    - echo "ABSOLUTE_CI_PROJECT_DIR is ${ABSOLUTE_CI_PROJECT_DIR}"
    - echo "CI_PROJECT_DIR is ${CI_PROJECT_DIR}"
    - cd /cygdrive/c # findRightSuperbuildCache.sh will restore "Superbuild-build" here
    - chmod +x ${ABSOLUTE_CI_PROJECT_DIR}/CI/findRightSuperbuildCache.sh
    - ${ABSOLUTE_CI_PROJECT_DIR}/CI/findRightSuperbuildCache.sh ${OS} ${CI_COMMIT_REF_NAME} ${MINIO_CACHE_SERVER_ADDRESS} ${MINIO_CACHE_SERVER_ACCESS_KEY} ${MINIO_CACHE_SERVER_SECRET_KEY} ${mode}
    # create a symbolic link
    - cd ${ABSOLUTE_CI_PROJECT_DIR}
    - export CYGWIN="winsymlinks:nativestrict"
    - ln -s /cygdrive/c/Superbuild-build Superbuild-build

.windows_superbuild: &windows_superbuild
  stage: superbuild
  <<: *windows_10
  stage: superbuild
  script:
    - echo "entering superbuild stage"
    - WIN_CI_PROJECT_DIR=$(cygpath -w $(pwd))
    - echo "WIN_CI_PROJECT_DIR is $WIN_CI_PROJECT_DIR"
    - git submodule update --init Superbuild/common-superbuild
    # we want short paths so we build at the root of a drive
    - mkdir /cygdrive/c/Superbuild-build
    - cd /cygdrive/c/Superbuild-build
    # first I tried to do `call [snip]\vcvarsall.bat x86_amd64`
    # but that was not sufficient (even if it was working inside Window's CMD from the VM GUI !)
    # so I ended up dumping all the variables from Window's CMD that is able to build using SET
    # the cmd-env-variables.cmd is used to restore these variables
    - echo "call \"C:\\Users\\vagrant\\Desktop\\cmd-env-variables.cmd\"" > superbuild.bat
    # note that we use forward slashes in Qt5_DIR path (i.e. Unix PATH),
    # else \Q is taken by MSVC as an option
    - echo "cmake $WIN_CI_PROJECT_DIR/Superbuild -GNinja -DCMAKE_BUILD_TYPE:STRING=${cmake_option_CMAKE_BUILD_TYPE} -DBUILD_TESTING=True -DUSE_SYSTEM_qt5=True -DQt5_DIR=\"C:/Qt/Qt5.10.0/5.10.0/msvc2015_64/lib/cmake/Qt5\"" >> superbuild.bat
    - echo "ninja" >> superbuild.bat
    - cat superbuild.bat
    - chmod +x superbuild.bat
    - ./superbuild.bat
    - echo "build terminated"
    - echo "removing common-superbuild/lidarview"
    - rm -rf common-superbuild/lidarview
    - echo "compressing and uploading Superbuild. This take some time..."
    - cd ..
    - tar zcf archive Superbuild-build/
    - /cygdrive/c/mc.exe config host add superbuild ${MINIO_CACHE_SERVER_ADDRESS} ${MINIO_CACHE_SERVER_ACCESS_KEY} ${MINIO_CACHE_SERVER_SECRET_KEY}
    - /cygdrive/c/mc.exe cp archive superbuild/runner/minio/project/808/${cache_patch}/${OS}/${CI_COMMIT_REF_NAME}-${mode}

windows_superbuild_manual: &windows_superbuild_manual
  when: manual
  <<: *windows_superbuild
  stage: manual

windows_superbuild_schedule: &windows_superbuild_schedule
  <<: *windows_superbuild
  only:
    - schedules

windows_build:
  stage: build
  <<: *windows_10
  extends: .only-important
  before_script: *windows_get_superbuild
  script:
    - git submodule update --init Superbuild/common-superbuild
    - cd /cygdrive/c/Superbuild-build # provided by windows_get_superbuild
    - echo "call \"C:\\Users\\vagrant\\Desktop\\cmd-env-variables.cmd\"" > build.bat
    - echo "ninja lidarview" >> build.bat
    - chmod +x build.bat
    - ./build.bat

windows_test:
  stage: test
  <<: *windows_10
  extends: .only-important
  before_script: *windows_get_superbuild
  script:
    - git submodule update --init Superbuild/common-superbuild
    - git submodule update --init TestData
    - cd /cygdrive/c/Superbuild-build # provided by windows_get_superbuild
    - echo "call \"C:\\Users\\vagrant\\Desktop\\cmd-env-variables.cmd\"" > test.bat
    - echo "ninja lidarview" >> test.bat
    - chmod +x test.bat
    - ./test.bat
    - cd common-superbuild/lidarview/build
    - echo "call \"C:\\Users\\vagrant\\Desktop\\cmd-env-variables.cmd\"" > test.bat
    - echo "cmake -DBUILD_TESTING=True ." >> test.bat
    - echo "ninja install" >> test.bat
    - echo "ctest -E \"$test_blacklist\"" >> test.bat
    - chmod +x test.bat
    - ./test.bat

.windows_package: &windows_package
  stage: package
  <<: *windows_10
  before_script: *windows_get_superbuild
  script:
    - git submodule update --init Superbuild/common-superbuild
    - cd /cygdrive/c/Superbuild-build # provided by windows_get_superbuild
    - echo "call \"C:\\Users\\vagrant\\Desktop\\cmd-env-variables.cmd\"" > package.bat
    - echo "ninja lidarview" >> package.bat
    - echo "ctest -V -R cpack" >> package.bat
    - chmod +x package.bat
    - ./package.bat

windows_package_manual: &windows_package_manual
  when: manual
  <<: *windows_package
  stage: manual
  artifacts:
    name: ${CI_JOB_NAME}
    paths:
     - Superbuild-build/*.exe # Superbuild-build links to ../Superbuild-build
     - Superbuild-build/*.zip
    expire_in: 1 hr

windows_package_schedule: &windows_package_schedule
  <<: *windows_package
  artifacts:
    name: ${CI_JOB_NAME}
    paths:
     - Superbuild-build/*.exe # Superbuild-build links to ../Superbuild-build
     - Superbuild-build/*.zip
    expire_in: 1 day
  only:
    - schedules
