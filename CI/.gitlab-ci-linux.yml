# jobs starting with "." are ignored by gitlab-ci, they are used as anchor, which
# enable to reuse the same code inside multiple jobs. Please see YAML specification
# for more information
.unix_get_superbuild:
  script: &unix_get_superbuild
    - cd ..
    - chmod +x ${CI_PROJECT_DIR}/CI/findRightSuperbuildCache.sh
    - ${CI_PROJECT_DIR}/CI/findRightSuperbuildCache.sh ${OS} ${CI_COMMIT_REF_NAME} ${MINIO_CACHE_SERVER_ADDRESS} ${MINIO_CACHE_SERVER_ACCESS_KEY} ${MINIO_CACHE_SERVER_SECRET_KEY} ${mode}
    # create a symbolic link
    - cd ${CI_PROJECT_DIR}
    - ln -s ../Superbuild-build Superbuild-build

.linux_superbuild: &linux_superbuild
  stage: superbuild
  script:
    - git submodule update --init Superbuild/common-superbuild
    # prepare directory
    - cd ..
    - mkdir Superbuild-build/
    - cd Superbuild-build/
    # configure & generate
    - >
      if [ "${mode}" == "full" ]; then
        optional_dependancies="ON"
      else
        optional_dependancies="OFF"
      fi
    - cmake -DCMAKE_BUILD_TYPE:STRING=${cmake_option_CMAKE_BUILD_TYPE}
      -DBUILD_TESTING=True
      -DENABLE_all=${optional_dependancies}    
      ${CI_PROJECT_DIR}/Superbuild
    # disable darknet on CI because no GPU available
    - cmake -DENABLE_all=False -DENABLE_darknet=False .
    # force pcl to build only with 3 thread because we don't have enough RAM
    - >
      if [ "${mode}" == "full" ]; then
        cmake -DSUPERBUILD_PROJECT_PARALLELISM=3 .
        make pcl -j8
        cmake -DSUPERBUILD_PROJECT_PARALLELISM=$(nproc) .
      fi
    # compile
    - make -j8
    # remove lidarview
    - rm -rf common-superbuild/lidarview
    # - cd ${CI_PROJECT_DIR}
    # create a symbolic link, inside the source tree else "push" will not work
    # - ln -s ../Superbuild-build Superbuild-build # not working witth
    - echo "compressing and uploading Superbuild. This take some time..."
    - cd ..
    - tar zcf archive Superbuild-build/
    - ~/mc config host add superbuild ${MINIO_CACHE_SERVER_ADDRESS} ${MINIO_CACHE_SERVER_ACCESS_KEY} ${MINIO_CACHE_SERVER_SECRET_KEY}
    - ~/mc cp archive superbuild/runner/minio/project/808/${cache_patch}/${OS}/${CI_COMMIT_REF_NAME}-${mode}

.linux_superbuild_manual: &linux_superbuild_manual
  when: manual
  <<: *linux_superbuild
  stage: manual

.linux_superbuild_schedule: &linux_superbuild_schedule
  <<: *linux_superbuild
  only:
    - schedules

.linux_build: &linux_build
  stage: build
  extends: .only-important
  before_script: *unix_get_superbuild
  script:
    - git submodule update --init Superbuild/common-superbuild
    - cd ../Superbuild-build/ # created by extracting cache in "unix_get_superbuild"
    - make lidarview -j8

.linux_test: &linux_test
  stage: test
  extends: .only-important
  before_script: *unix_get_superbuild # you cannot put linux_build here
  script:
    # get test data and baseline
    - git submodule update --init Superbuild/common-superbuild
    - git submodule update --init TestData
    - cd ../Superbuild-build/ # created by extracting cache in "unix_get_superbuild"
    - make lidarview -j8
    - cd ../Superbuild-build/common-superbuild/lidarview/build
    - cmake . -DBUILD_TESTING=True
    - make
    # excluding packaging test targets (packaging is done later)
    # TODO current Source related tests fails, so we skip them.
    # This need to be fixed !
    - ctest -E "$test_blacklist"

.linux_package: &linux_package
  stage: package
  before_script: *unix_get_superbuild # you cannot put linux_build here
  script:
    - git submodule update --init Superbuild/common-superbuild
    - cd ../Superbuild-build/ # created by extracting cache in "unix_get_superbuild"
    - make lidarview -j8
    - ctest -R cpack-lidarview-TGZ -V

.linux_package_manual: &linux_package_manual
  when: manual
  <<: *linux_package
  stage: manual
  artifacts:
    name: ${CI_JOB_NAME}
    paths:
     - Superbuild-build/*.tar.gz # Superbuild-build links to ../Superbuild-build
    expire_in: 1 hr

.linux_package_schedule: &linux_package_schedule
  <<: *linux_package
  artifacts:
    name: ${CI_JOB_NAME}
    paths:
     - Superbuild-build/*.tar.gz # Superbuild-build links to ../Superbuild-build
    expire_in: 1 day
  only:
    - schedules

#-------------------------------------------------------------------------------
# jobs for ubunu 16.04
#-------------------------------------------------------------------------------
.ubuntu_16_04: &ubuntu_16_04
  tags:
    - ubuntu_16.04
  variables:
    OS: ubuntu_16.04

ubuntu16.04_full_superbuild_manual:
  <<: *ubuntu_16_04
  <<: *linux_superbuild_manual

# duplicate manual job until gitlab 12.2 see https://gitlab.com/gitlab-org/gitlab-ce/issues/24935
ubuntu16.04_light_superbuild_manual:
  <<: *ubuntu_16_04
  variables:
    OS: ubuntu_16.04
    mode: "light"
  <<: *linux_superbuild_manual

ubuntu16.04_superbuild_schedule:
  <<: *ubuntu_16_04
  <<: *linux_superbuild_schedule

ubuntu16.04_build:
  <<: *ubuntu_16_04
  <<: *linux_build

ubuntu16.04_test:
  <<: *ubuntu_16_04
  <<: *linux_test

# duplicate manual job until gitlab 12.2 see https://gitlab.com/gitlab-org/gitlab-ce/issues/24935
ubuntu16.04_light_package_manual:
  <<: *ubuntu_16_04
  variables:
    OS: ubuntu_16.04
    mode: "light"
  <<: *linux_package_manual

ubuntu16.04_full_package_manual:
  <<: *ubuntu_16_04
  <<: *linux_package_manual

ubuntu16.04_package_schedule:
  <<: *ubuntu_16_04
  <<: *linux_package_schedule
